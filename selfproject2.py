# -*- coding: utf-8 -*-
"""selfproject2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rdEjYnW5nR2eJwUqPQDOWOMrGAWeIl2p

<p style="text-align:center">
    <a href="https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01" target="_blank">
    <img src="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png" width="200" alt="Skills Network Logo"  />
    </a>
</p>

# **Client behavior prediction with AI model in Banking**

The purpose of this laboratory is to develop different types of classifiers of artificial intelligence and their ensembles for the classification of customers in banking.

After completing this laboratory work you will be able to:

1. compare different types of classifiers
2. create an ensemble of models
3. create a ensemble of classifier based on neural networks
4. to make classification of clients on the basis of the developed models

## Outline

* Materials and Methods
* General Part
  * Import Libraries
  * DataSet preparation
  * Classical classification models
  * Ensemble of classical classification models
  * Analysis of errors
  * Classification with Keras
  * Own Keras ensemble classificator
* Tasks
* Authors

----

## Materials and Methods

The data that we are going to use for this is a subset of an open source Bank Marketing Data Set from the UCI ML repository: https://archive.ics.uci.edu/ml/citation_policy.html.

> This dataset is public available for research. The details are described in [Moro et al., 2014].
Please include this citation if you plan to use this database:
[Moro et al., 2014] S. Moro, P. Cortez and P. Rita. A Data-Driven Approach to Predict the Success of Bank Telemarketing. Decision Support Systems, Elsevier, 62:22-31, June 2014

During the work, the task of a preliminary analysis of a positive response (term deposit) to direct calls from the bank is solved. In essence, the task is the matter of bank scoring, i.e. according to the characteristics of clients (potential clients), their behavior is predicted (loan default, a wish to open a deposit, etc.).

In this lesson, we will try to give answers to a set of questions that may be relevant when analyzing banking data:

1. What types of classificators are useful in banking?
2. How to create ensemble of models?
4. How to create own classificator base on neural network?
5. How to estimate accurasy of model?

In addition, we will make the conclusions for the obtained results of our classification analysis to plan marketing banking campaigns more effectively.

[Keras](https://keras.io/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01) Keras is the most used deep learning framework among top-5 winning teams on Kaggle. Because Keras makes it easier to run new experiments, it empowers you to try more ideas than your competition, faster. And this is how you win.Built on top of TensorFlow 2, Keras is an industry-strength framework that can scale to large clusters of GPUs or an entire TPU pod. It's not only possible; it's easy.Take advantage of the full deployment capabilities of the TensorFlow platform. You can export Keras models to JavaScript to run directly in the browser, to TF Lite to run on iOS, Android, and embedded devices. It's also easy to serve Keras models as via a web API. Keras is a central part of the tightly-connected TensorFlow 2 ecosystem, covering every step of the machine learning workflow, from data management to hyperparameter training to deployment solutions.Keras is used by CERN, NASA, NIH, and many more scientific organizations around the world (and yes, Keras is used at the LHC). Keras has the low-level flexibility to implement arbitrary research ideas while offering optional high-level convenience features to speed up experimentation cycles. Because of its ease-of-use and focus on user experience, Keras is the deep learning solution of choice for many university courses. It is widely recommended as one of the best ways to learn deep learning.

## Import Libraries

Download data using a URL.
"""

!wget https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip

"""Alternative URL for the dataset downloading.

"""

!wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/VDA_Banking_L2/bank-additional.zip

"""Unzipping to a folder. It is a good idea to apply the `-o` and `-q`  when unzipping to quiet the process and overwrite any existing folders.

"""

!unzip -o -q bank-additional.zip

"""Import the libraries necessary to use in this lab. We can add some aliases to make the libraries easier to use in our code and set a default figure size for further plots. Ignore the warnings.

"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
# %matplotlib inline
plt.rcParams["figure.figsize"] = (8, 6)
# Data transformation
from sklearn.preprocessing import LabelEncoder, OrdinalEncoder
from sklearn.preprocessing import MinMaxScaler
# Features Selection
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2, mutual_info_classif
# warnings deactivate
import warnings
warnings.filterwarnings('ignore')

"""Further specify the value of the `precision` parameter equal to 2 to display two decimal signs (instead of 6 as default).

"""

pd.set_option("precision", 2)
pd.options.display.float_format = '{:.2f}'.format

"""## DataSet preparation

We will use the same DataSet like in previous labs. Therefore next some steps will be group to one block.
"""

df = pd.read_csv('bank-additional/bank-additional-full.csv', sep = ';')
# Transform to categorical data
col_cat = list(df.select_dtypes(include=['object']).columns)
df.loc[:, col_cat] = df[col_cat].astype('category')
# Create DataSets
X = df.iloc[:,:-1]  #input columns
y = df.iloc[:,-1]    #target column
# Encoding
col_cat.pop()
oe = OrdinalEncoder()
oe.fit(X[col_cat])
X_cat_enc = oe.transform(X[col_cat])
X_cat_enc = pd.DataFrame(X_cat_enc)
X_cat_enc.columns = col_cat
# Normalization
col_num = list(df.select_dtypes(include =['int64', 'float64']).columns)
scaler = MinMaxScaler(feature_range=(0, 1))
X_num_enc = scaler.fit_transform(X[col_num])
X_num_enc = pd.DataFrame(X_num_enc)
X_num_enc.columns = col_num
x_enc = pd.concat([X_cat_enc, X_num_enc], axis=1)
# Encoding target
le = LabelEncoder()
le.fit(y)
y_enc = le.transform(y)
y_enc = pd.Series(y_enc)
y_enc.columns = y.name
# Remove correlated fields
col = list(x_enc.columns)
col.remove('emp.var.rate')
col.remove('nr.employed')
x_enc = x_enc[col]
# Feature selection
bestfeatures = SelectKBest(score_func=chi2, k=10)
fit = bestfeatures.fit(x_enc,y_enc)
dfscores = pd.DataFrame(fit.scores_)
dfcolumns = pd.DataFrame(x_enc.columns)
featureScores = pd.concat([dfcolumns, dfscores],axis=1)
featureScores.columns = ['Specs','Score']  #naming the dataframe columns
x_enc = x_enc[list(featureScores.nlargest(10,'Score')['Specs'])]
print(x_enc)
print(y_enc)

"""As a result, we obtained a ready-made DataSet that can be used for further classification of bank customers.

## Classical classification models

Let's import necessary libraries
"""

#Classifiers
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import VotingClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import plot_confusion_matrix

"""You can use 2 approaches to determine the accuracy of the model. the first is to divide the data set into training and test. This was shown in previous laboratory work. The second is evaluating a score by cross-validation.

[Cross-validation](https://en.wikipedia.org/wiki/Cross-validation_\(statistics\)?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01), sometimes called rotation estimation or out-of-sample testing, is any of various similar model validation techniques for assessing how the results of a statistical analysis will generalize to an independent data set. It is mainly used in settings where the goal is prediction, and one wants to estimate how accurately a predictive model will perform in practice. The goal of cross-validation is to test the model's ability to predict new data that was not used in estimating it, in order to flag problems like overfitting or selection bias and to give an insight on how the model will generalize to an independent dataset (i.e., an unknown dataset, for instance from a real problem).

One round of cross-validation involves partitioning a sample of data into complementary subsets, performing the analysis on one subset (called the training set), and validating the analysis on the other subset (called the validation set or testing set). To reduce variability, in most methods multiple rounds of cross-validation are performed using different partitions, and the validation results are combined (e.g. averaged) over the rounds to give an estimate of the model's predictive performance.

In summary, cross-validation combines (averages) measures of fitness in prediction to derive a more accurate estimate of model prediction performance.

We can use **[cross_val_score()](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01)** for estimate accuracy of any classificator from **sklearn** framework.

Let's test it on LogisticRegression()
"""

clf = LogisticRegression()
scores = cross_val_score(clf, x_enc, y_enc, scoring='accuracy', cv=5)
print("Accuracy: %0.2f (+/- %0.2f) [%s]" % (scores.mean(), scores.std(), 'Logistic Regression'))

"""To compare results of different classificators, let's save results in lists:

"""

clf_name = ['Logistic Regression']
clf_acc = [scores.mean()]

"""As you can see, accuracy is not bad.

Let's try to use another classificators and compare thair accuracy.

We will test:
* [Logistic Regression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01&highlight=logistic+regression#sklearn.linear_model.LogisticRegression)
* [Quadratic Discriminant Analysis](https://scikit-learn.org/stable/modules/generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.html?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01&highlight=quadraticdiscriminantanalysis#sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis)
* [Naive Bayes](https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01&highlight=gaussiannb#sklearn.naive_bayes.GaussianNB)
* [Random Forest](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01&highlight=randomforestclassifier#sklearn.ensemble.RandomForestClassifier)
* [Ada Boost](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.AdaBoostClassifier.html?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01&highlight=adaboostclassifier#sklearn.ensemble.AdaBoostClassifier)

"""

clf1 = LogisticRegression(random_state=1)
clf2 = QuadraticDiscriminantAnalysis()
clf3 = GaussianNB()
clf4 = RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1)
clf5 = AdaBoostClassifier()

for clf, label in zip([clf1, clf2, clf3, clf4, clf5], ['Logistic Regression', 'Quadratic Discriminant Analysis', 'naive Bayes', 'Random Forest',  'Ada Bust']):
     scores = cross_val_score(clf, x_enc, y_enc, scoring='accuracy', cv=5)
     print("Accuracy: %0.2f (+/- %0.2f) [%s]" % (scores.mean(), scores.std(), label))

"""## Ensemble of classical classification models

In addition, different classifiers may err in different situations. Therefore, to compensate for each other's mistakes, it is necessary to use model ensembles by Voting Classifier.

A **[Voting Classifier](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.VotingClassifier.html?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01)** is a machine learning model that trains on an ensemble of numerous models and predicts an output (class) based on their highest probability of chosen class as the output.
It simply aggregates the findings of each classifier passed into Voting Classifier and predicts the output class based on the highest majority of voting. The idea is instead of creating separate dedicated models and finding the accuracy for each them, we create a single model which trains by these models and predicts output based on their combined majority of voting for each output class.

Voting Classifier supports two types of votings.

**Hard Voting**: In hard voting, the predicted output class is a class with the highest majority of votes i.e the class which had the highest probability of being predicted by each of the classifiers. Suppose three classifiers predicted the output class(A, A, B), so here the majority predicted A as output. Hence A will be the final prediction.


**Soft Voting**: In soft voting, the output class is the prediction based on the average of probability given to that class. Suppose given some input to three models, the prediction probability for class A = (0.30, 0.47, 0.53) and B = (0.20, 0.32, 0.40). So the average for class A is 0.4333 and B is 0.3067, the winner is clearly class A because it had the highest probability averaged by each classifier.

Let's try to use Hard Voiting.
"""

eclf = VotingClassifier(
     estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3), ('rfc', clf4), ('abc', clf5)],
     voting='hard')
scores = cross_val_score(eclf, x_enc, y_enc, scoring='accuracy', cv=5)
print("Accuracy: %0.2f (+/- %0.2f) [%s]" % (scores.mean(), scores.std(), 'Hard Voiting Ensemble'))

clf_name.append('Hard Voiting Ensemble')
clf_acc.append(scores.mean())

"""As you can see, accuracy of ensembe is smaler than for Logistic regression but bigger than for Ada Bust.
To increase accuracy, it is necessary to use Soft Voiting and take into account the accuracy of classification models, indicating their importance (weights).

As weights we can use accuracy of each model

"""

eclf = VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3), ('rfc', clf4), ('abc', clf5)],
     voting='soft', weights=[0.87, 0.83, 0.80, 0.74, 0.61 ])

scores = cross_val_score(eclf, x_enc, y_enc, scoring='accuracy', cv=5)
print("Accuracy: %0.2f (+/- %0.2f) [%s]" % (scores.mean(), scores.std(), 'Soft Voiting Ensemble'))

clf_name.append('Soft Voiting Ensemble')
clf_acc.append(scores.mean())

"""As you can see, accuracy of this ensemble is better.

## Analysis of errors

The **[convenient matrix](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.plot_confusion_matrix.html?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01)** can use to analyze ensemble of models errors.

Cross-validation does not allow you to make such an analysis, because it creates not one but several models depending on the number of partitions in the DataSet. Therefore, it is necessary to divide the data into test and train, fit the model and check on the test DataSet
To do this we can use train_test_split. Let's separate DataSets in 0.33 proportion train/test
"""

X_train, X_test, y_train, y_test = train_test_split(x_enc, y_enc, test_size=0.33, random_state=1)
eclf.fit(X_train, y_train)
yhat = eclf.predict(X_test)

scores_train = eclf.score(X_train, y_train)
scores_test = eclf.score(X_test, y_test)
print('Training DataSet accuracy: {: .1%}'.format(scores_train), 'Test DataSet accuracy: {: .1%}'.format(scores_test))
plot_confusion_matrix(eclf, X_test, y_test)
plt.show()

"""As you can see accuracy test and train DataSet is the same. It indicates, that models is exact. And for increasing accuracy you should add new rows in DataSet.

## Classification with Keras

The basic architecture of the deep learning neural network, which we will be following, consists of three main components.

**Input Layer**: This is where the training observations are fed. The number of predictor variables is also specified here through the neurons.

**Hidden Layers**:
These are the intermediate layers between the input and output layers. The deep neural network learns about the relationships involved in data in this component.In our cases hidden layer will have 20 neurons.

**Output Layer**: This is the layer where the final output is extracted from what’s happening in the previous two layers. In case of classification problems, the output layer will have two neuron because 2 classes.

Let's import necessary libraries
"""

from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.utils import np_utils

"""We will start by setting up the model like a function. The first line of code calls for the Sequential constructor. We are using the Sequential model because our network consists of a linear stack of layers.
The second line of code represents the hidden layer where we must sign number of hidden neurons which specifies the activation function and the number of input dimensions, which in our case is 10 predictors.
The next line of code creates the output layer with two neurons because there are two output classes, 0 and 1. We use 'softmax' as the activation function for the output layer, so that the sum of the predicted values from all the neurons in the output layer adds up to one.
In the above lines of codes, we have defined our deep learning model architecture. But before we can start training the model, we will configure the learning process. This is done in the last line of code using the model.compile() function.
In defining our compiler, we will use 'categorical cross-entropy' as our loss measure, 'adam' as the optimizer algorithm, and 'accuracy' as the evaluation metric. The main advantage of the "adam" optimizer is that we don't need to specify the learning rate, as is the case with gradient descent. Using “adam” will, thereby, save us the task of optimizing the learning rate for our model.

"""

# define baseline model
def baseline_model():
    # create model
    model = Sequential()
    model.add(Dense(20, input_dim=10, activation='relu'))
    model.add(Dense(2, activation='softmax'))
    # Compile model
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

"""Now we are ready to build the model which is done in the code below. We also provide the argument, epochs, which represents the number of training iterations. We have taken 10 epochs.

"""

estimator = KerasClassifier(build_fn=baseline_model, epochs=10, batch_size=5, verbose=1)
history = estimator.fit(X_train, y_train)

"""Keras provides the capability to register callbacks when training a deep learning model.

One of the default callbacks that is registered when training all deep learning models is the History callback. It records training metrics for each epoch. This includes the loss and the accuracy (for classification problems) as well as the loss and accuracy for the validation dataset, if one is set.

The history object is returned from calls to the fit() function used to train the model. Metrics are stored in a dictionary in the history member of the object returned.

For example, you can list the metrics collected in a history object using the following snippet of code after a model is trained:

"""

acc = history.history['accuracy']
loss = history.history['loss']

epochs_range = range(10)

plt.figure(figsize=(15, 15))
plt.subplot(2, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.legend(loc='lower right')
plt.title('Training Accuracy')

plt.subplot(2, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.legend(loc='upper right')
plt.title('Training Loss')
plt.show()

"""As you can see from the plots:  accuracy has reached a maximum and loss funcion on minimum. It means that model is good fitted and can use for prediction

"""

from sklearn.metrics import accuracy_score

"""When model is fitted we can predict on the Test Data and Compute Evaluation Metrics.

The first line of code predicts on the test data, while the second line evaluates the model, and the third line prints the accuracy on the test data.

"""

yhat = estimator.predict(X_test)
accuracy = accuracy_score(y_test, yhat)
print('Accuracy: %.2f' % (accuracy))

"""<details><summary>Click <b>here</b> for the solution</summary>
<code>    
yhat = estimator.predict(X_test)
</code>
</details>

"""

clf_name.append('KerasClassifier')
clf_acc.append(accuracy)

"""As you can see accurasy of this model is better than all previous

Also we can create a confusion matrix. Unfortunately, Keras framework does not have plot_confusion_matrix() function. Therefore, we have to create it using Pandas and **[Seaborn.heatmap()](https://seaborn.pydata.org/generated/seaborn.heatmap.html?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01)**

"""

from sklearn.metrics import confusion_matrix
# Confusion matrix
cm = pd.DataFrame(confusion_matrix(yhat, y_test))
sns.heatmap(cm, annot=True, )
plt.xlabel("True labels")
plt.ylabel("Predicted labels")
plt.show()

"""We can easy use this model, that will use all 10 fields as input parameter to calculate class of clients.

As you can see, own classificator is more exact, but fitting process is too long. Unfortunatelly you cannot use this estimator for VotingClassifier.

To use ensembe of similar classificators you can use **[BaggingClassifier()](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.BaggingClassifier.html?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01)**

"""

from sklearn.ensemble import BaggingClassifier
ensemble = BaggingClassifier(estimator, n_estimators=3, max_samples=1.0, max_features=1.0)
ensemble.fit(X_train, y_train)

"""In this example we created ensemble, that consists from 3 identical Keras Classificators. Fitting process are using random processes therefore accuracy of these 3 Classificators will be little different. But ensamble must show the same or bettter result.

"""

yhat = ensemble.predict(X_test)
accuracy = accuracy_score(y_test, yhat)
print('Accuracy: %.4f' % (accuracy))

clf_name.append('BaggingClassifier')
clf_acc.append(accuracy)

"""As you can see result is little better.

## Own Keras ensemble classificator

If you would like use ensamble of different models you can create own ensembe.
To do this you must:
1. Create list of fitted classificators
2. Join their outputts
3. Use these outputs like input for stack classificator

Let's do it.

First of all we must create list of Keras classificators. If you would like, youe can use different classificators. But for comparison of accuracy we will use the same keras models.
"""

# fit and save models
n_members = 3
members = list()
for i in range(n_members):
    # fit model
    model = KerasClassifier(build_fn=baseline_model, epochs=10, batch_size=5, verbose=1)
    model.fit(X_train, y_train)
    members.append(model)

"""Let's calculate accuracy of these models:

"""

# evaluate standalone models on test dataset
for model in members:
    yhat = model.predict(X_test)
    accuracy = accuracy_score(y_test, yhat)
    print('Accuracy: %.4f' % (accuracy))

"""Than we must join outputs of these models into one DataSet that will use like input for stack classificator. Let's create function, that will use ensemble models and input DataSet like input parameters and return join results.

"""

# create stacked model input dataset as outputs from the ensemble
from numpy import dstack
def stacked_dataset(members, inputX):
    stackX = None
    for model in members:
        # make prediction
        yhat = model.predict(inputX, verbose=0)
        # stack predictions into [rows, members, probabilities]
        if stackX is None:
            stackX = yhat
        else:
            stackX = dstack((stackX, yhat))
    # flatten predictions to [rows, members]
    stackX = stackX.reshape((stackX.shape[1], stackX.shape[2]))
    return stackX

"""After that we must create stack classificator that combine results of ensemble members. Let's use LogisticRegression for it and create function that will fit it:

"""

# fit a model based on the outputs from the ensemble members
def fit_stacked_model(members, inputX, inputy):
    # create dataset using ensemble
    stackedX = stacked_dataset(members, inputX)
    # fit standalone model
    model = LogisticRegression()
    model.fit(stackedX, inputy)
    return model

"""While funcion are created, we can fit stack ensembe model:

"""

# fit stacked model using the ensemble
model = fit_stacked_model(members, X_test, y_test)

"""To calculate prediction we must create function, that will use members, stack function and input DataSet like input parameters:

"""

# make a prediction with the stacked model
def stacked_prediction(members, model, inputX):
    # create dataset using ensemble
    stackedX = stacked_dataset(members, inputX)
    # make a prediction
    yhat = model.predict(stackedX)
    return yhat

"""Let's make prediction of our own ensemble:

"""

yhat = stacked_prediction(members, model, X_test)
accuracy = accuracy_score(y_test, yhat)
print('Accuracy: %.4f' % (accuracy))

"""As you can see, this accuracy is better!

"""

clf_name.append('LinearKerasEnsemble')
clf_acc.append(accuracy)

"""Let's compare results of our ensembles:

"""

df = pd.DataFrame({'Classificators':clf_name, 'Accuracy':clf_acc})
ax = df.plot.bar(x='Classificators', y='Accuracy', rot=45)

pd.options.display.float_format = '{:.4f}'.format
df

"""As you can see accurasy of own Classificator Ensemble is the best

## Conclusions

In this lab, we compared different classifiers. Also we learned how to join them in an ensemble.
We also learned to create our own classifiers based on neural networks and combine them into an ensemble.
We compared the accuracy of different classifiers and their ensembles and showed how they can be used in banking on the examples of customer classification.

The accuracy of the decision was about 90%.

## Tasks

Create own stack Classificator base on Keras Classifier

**Task 1** Create user function that defined baseline stacked classificator model based on Neural Network
"""

def stacked_model():
 # create model
    model = Sequential()
    model.add(Dense(20, input_dim=n_members, activation='relu'))
    model.add(Dense(2, activation='softmax'))
    # Compile model
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

"""**Task 2** Create user function that defined and fit a model based on the outputs from the ensemble members based on Keras Classifier

"""

def fit_stacked_model_NN(members, inputX, inputy):
 # create dataset using ensemble
    stackedX = stacked_dataset(members, inputX)
    # fit standalone model
    model = KerasClassifier(build_fn=stacked_model, epochs=10, batch_size=5, verbose=1)
    model.fit(stackedX, inputy)
    return model

"""**Task 3** Fit stacked model using the ensemble and calculate accurasy

"""

model = fit_stacked_model_NN(members, X_test, y_test)
yhat = stacked_prediction(members, model, X_test)
accuracy = accuracy_score(y_test, yhat)
print('Accuracy: %.2f' % (accuracy))

"""**Task 4** Compare results of all classifiers

"""

clf_name.append('NNKerasEnsemble')
clf_acc.append(accuracy)
df = pd.DataFrame({'Classificators':clf_name, 'Accuracy':clf_acc})
ax = df.plot.bar(x='Classificators', y='Accuracy', rot=45)
df

"""## Authors

[Yaroslav Vyklyuk, prof., PhD., DrSc](http://vyklyuk.bukuniver.edu.ua/en/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01)

Copyright &copy; 2021 IBM Corporation. This notebook and its source code are released under the terms of the [MIT License](https://cognitiveclass.ai/mit-license/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkGuidedProjectsIBMGPXX0H9BEN431-2022-01-01).
"""